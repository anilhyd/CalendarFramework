//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Serialization;

namespace Calendar.Framework.Entity
{
    using System;
    using System.Collections.Generic;
    
    using System.Runtime.Serialization;
    using Microsoft.EntityFrameworkCore;

     [DataContract(IsReference = true)]
     [Serializable]
     public partial class Rule : EntityBase
    {
        public Rule()
        {
            this.RuleFeatureOperation = new HashSet<RuleFeatureOperation>();
            this.RuleMapping = new HashSet<RuleMapping>();
        }
    
    
    	#region Copy
    	/// <summary>
        /// Clones or copy an object.
        /// </summary>
        /// <remarks>
        /// <para>The object to be cloned must be serializable.</para>
        /// <para>The serialization is to use the 
        /// <see cref="System.Xml.Serialization.XmlSerializer" />.
        /// </para>
        /// </remarks>
        /// <returns>AuditUser  object.</returns>
        public Rule Copy()
        {
            return (Rule)this.MemberwiseClone();
        }
        
        /// <summary>
        /// Creates the new copy of the entity.
        /// </summary>
        public Rule CreateObject()
        {
            return new Rule();
        }
    
        #endregion
    
    		[DataMember]
    		public string  RuleID
    		{
    			 get
    			{
    				return lruleid;
    			}
    
    			 set
    			{
    				if (lruleid != value)
    				{
    					if (base.EntityState == EntityState.Modified)
    						base.RecordStateValue("RuleID", new Tuple<object, object>(lruleid, value));
         				if(value != null)
        					lruleid = value.Trim();
        				else
        					lruleid = string.Empty;
    				}
    			}
    		}
    		private string lruleid = string.Empty;
    		
    		[DataMember]
    		public bool  RuleType
    		{
    			 get
    			{
    				return lruletype;
    			}
    
    			 set
    			{
    					if (lruletype != value)
    					{
    						if (base.EntityState ==  EntityState.Modified)
    							this.RecordStateValue("RuleType", new Tuple<object, object>(lruletype, value));
    						lruletype = value;
    					}
    			}
    		}
    		private bool lruletype = default(bool);
    		
    		[DataMember]
    		public string  Name
    		{
    			 get
    			{
    				return lname;
    			}
    
    			 set
    			{
    				if (lname != value)
    				{
    					if (base.EntityState ==  EntityState.Modified)
    						base.RecordStateValue("Name", new Tuple<object, object>(lname, value));
         				if(value != null)
        					lname = value.Trim();
        				else
        					lname = string.Empty;
    				}
    			}
    		}
    		private string lname = string.Empty;
    		
    		[DataMember]
    		public string  AssemblyName
    		{
    			 get
    			{
    				return lassemblyname;
    			}
    
    			 set
    			{
    				if (lassemblyname != value)
    				{
    					if (base.EntityState ==  EntityState.Modified)
    						base.RecordStateValue("AssemblyName", new Tuple<object, object>(lassemblyname, value));
    					lassemblyname = value;
    				}
    			}
    		}
    		private string lassemblyname;
    		
    		[DataMember]
    		public string  ClassName
    		{
    			 get
    			{
    				return lclassname;
    			}
    
    			 set
    			{
    				if (lclassname != value)
    				{
    					if (base.EntityState ==  EntityState.Modified)
    						base.RecordStateValue("ClassName", new Tuple<object, object>(lclassname, value));
    					lclassname = value;
    				}
    			}
    		}
    		private string lclassname;
    		
    		[DataMember]
    		public string  ErrorCode
    		{
    			 get
    			{
    				return lerrorcode;
    			}
    
    			 set
    			{
    				if (lerrorcode != value)
    				{
    					if (base.EntityState ==  EntityState.Modified)
    						base.RecordStateValue("ErrorCode", new Tuple<object, object>(lerrorcode, value));
    					lerrorcode = value;
    				}
    			}
    		}
    		private string lerrorcode;
    		
    		[DataMember]
    		public string  RowId
    		{
    			 get
    			{
    				return lrowid;
    			}
    
    			 set
    			{
    				if (lrowid != value)
    				{
    					if (base.EntityState ==  EntityState.Modified)
    						base.RecordStateValue("RowId", new Tuple<object, object>(lrowid, value));
    					lrowid = value;
    				}
    			}
    		}
    		private string lrowid;
    		
    		[DataMember]
    		public string  AppId
    		{
    			 get
    			{
    				return lappid;
    			}
    
    			 set
    			{
    				if (lappid != value)
    				{
    					if (base.EntityState ==  EntityState.Modified)
    						base.RecordStateValue("AppId", new Tuple<object, object>(lappid, value));
    					lappid = value;
    				}
    			}
    		}
    		private string lappid;
    		
    		[DataMember]
    		public string  COLUMNC16
    		{
    			 get
    			{
    				return lcolumnc16;
    			}
    
    			 set
    			{
    				if (lcolumnc16 != value)
    				{
    					if (base.EntityState ==  EntityState.Modified)
    						base.RecordStateValue("COLUMNC16", new Tuple<object, object>(lcolumnc16, value));
    					lcolumnc16 = value;
    				}
    			}
    		}
    		private string lcolumnc16;
    		
    		[DataMember]
    		public string  COLUMNC17
    		{
    			 get
    			{
    				return lcolumnc17;
    			}
    
    			 set
    			{
    				if (lcolumnc17 != value)
    				{
    					if (base.EntityState ==  EntityState.Modified)
    						base.RecordStateValue("COLUMNC17", new Tuple<object, object>(lcolumnc17, value));
    					lcolumnc17 = value;
    				}
    			}
    		}
    		private string lcolumnc17;
    		
    
        [DataMember]
    public virtual ICollection<RuleFeatureOperation> RuleFeatureOperation { get; set; }
        [DataMember]
    public virtual ICollection<RuleMapping> RuleMapping { get; set; }
    }
}
