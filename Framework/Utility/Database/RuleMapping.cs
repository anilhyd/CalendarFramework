//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Serialization;

namespace Calendar.Framework.Entity
{
    using System;
    using System.Collections.Generic;
    
    using System.Runtime.Serialization;
    
     [DataContract(IsReference = true)]
     [Serializable]
     public partial class RuleMapping : EntityBase
    {
    
    	#region Copy
    	/// <summary>
        /// Clones or copy an object.
        /// </summary>
        /// <remarks>
        /// <para>The object to be cloned must be serializable.</para>
        /// <para>The serialization is to use the 
        /// <see cref="System.Xml.Serialization.XmlSerializer" />.
        /// </para>
        /// </remarks>
        /// <returns>AuditUser  object.</returns>
        public RuleMapping Copy()
        {
            return (RuleMapping)this.MemberwiseClone();
        }
        
        /// <summary>
        /// Creates the new copy of the entity.
        /// </summary>
        public RuleMapping CreateObject()
        {
            return new RuleMapping();
        }
    
        #endregion
    
    		[DataMember]
    		public string  RuleMapId
    		{
    			 get
    			{
    				return lrulemapid;
    			}
    
    			 set
    			{
    				if (lrulemapid != value)
    				{
    					if (base.EntityState == Microsoft.EntityFrameworkCore.EntityState.Modified)
    						base.RecordStateValue("RuleMapId", new Tuple<object, object>(lrulemapid, value));
         				if(value != null)
        					lrulemapid = value.Trim();
        				else
        					lrulemapid = string.Empty;
    				}
    			}
    		}
    		private string lrulemapid = string.Empty;
    		
    		[DataMember]
    		public string  RuleId
    		{
    			 get
    			{
    				return lruleid;
    			}
    
    			 set
    			{
    				if (lruleid != value)
    				{
    					if (base.EntityState == Microsoft.EntityFrameworkCore.EntityState.Modified)
    						base.RecordStateValue("RuleId", new Tuple<object, object>(lruleid, value));
         				if(value != null)
        					lruleid = value.Trim();
        				else
        					lruleid = string.Empty;
    				}
    			}
    		}
    		private string lruleid = string.Empty;
    		
    		[DataMember]
    		public string  FeatureId
    		{
    			 get
    			{
    				return lfeatureid;
    			}
    
    			 set
    			{
    				if (lfeatureid != value)
    				{
    					if (base.EntityState == Microsoft.EntityFrameworkCore.EntityState.Modified)
    						base.RecordStateValue("FeatureId", new Tuple<object, object>(lfeatureid, value));
         				if(value != null)
        					lfeatureid = value.Trim();
        				else
        					lfeatureid = string.Empty;
    				}
    			}
    		}
    		private string lfeatureid = string.Empty;
    		
    		[DataMember]
    		public string  FeatureCode
    		{
    			 get
    			{
    				return lfeaturecode;
    			}
    
    			 set
    			{
    				if (lfeaturecode != value)
    				{
    					if (base.EntityState == Microsoft.EntityFrameworkCore.EntityState.Modified)
    						base.RecordStateValue("FeatureCode", new Tuple<object, object>(lfeaturecode, value));
         				if(value != null)
        					lfeaturecode = value.Trim();
        				else
        					lfeaturecode = string.Empty;
    				}
    			}
    		}
    		private string lfeaturecode = string.Empty;
    		
    		[DataMember]
    		public string  Operation
    		{
    			 get
    			{
    				return loperation;
    			}
    
    			 set
    			{
    				if (loperation != value)
    				{
    					if (base.EntityState == Microsoft.EntityFrameworkCore.EntityState.Modified)
    						base.RecordStateValue("Operation", new Tuple<object, object>(loperation, value));
    					loperation = value;
    				}
    			}
    		}
    		private string loperation;
    		
    		[DataMember]
    		public string  PropertyName
    		{
    			 get
    			{
    				return lpropertyname;
    			}
    
    			 set
    			{
    				if (lpropertyname != value)
    				{
    					if (base.EntityState == Microsoft.EntityFrameworkCore.EntityState.Modified)
    						base.RecordStateValue("PropertyName", new Tuple<object, object>(lpropertyname, value));
    					lpropertyname = value;
    				}
    			}
    		}
    		private string lpropertyname;
    		
    		[DataMember]
    		public string  Value
    		{
    			 get
    			{
    				return lvalue;
    			}
    
    			 set
    			{
    				if (lvalue != value)
    				{
    					if (base.EntityState == Microsoft.EntityFrameworkCore.EntityState.Modified)
    						base.RecordStateValue("Value", new Tuple<object, object>(lvalue, value));
    					lvalue = value;
    				}
    			}
    		}
    		private string lvalue;
    		
    		[DataMember]
    		public string  EntityName
    		{
    			 get
    			{
    				return lentityname;
    			}
    
    			 set
    			{
    				if (lentityname != value)
    				{
    					if (base.EntityState == Microsoft.EntityFrameworkCore.EntityState.Modified)
    						base.RecordStateValue("EntityName", new Tuple<object, object>(lentityname, value));
    					lentityname = value;
    				}
    			}
    		}
    		private string lentityname;
    		
    		[DataMember]
    		public Nullable<bool>  RuleSource
    		{
    			 get
    			{
    				return lrulesource;
    			}
    
    			 set
    			{
    					if (lrulesource != value)
    					{
    						if (base.EntityState == Microsoft.EntityFrameworkCore.EntityState.Modified)
    							this.RecordStateValue("RuleSource", new Tuple<object, object>(lrulesource, value));
    						lrulesource = value;
    					}
    			}
    		}
    		private Nullable<bool> lrulesource = default(Nullable<bool>);
    		
    		[DataMember]
    		public string  RowId
    		{
    			 get
    			{
    				return lrowid;
    			}
    
    			 set
    			{
    				if (lrowid != value)
    				{
    					if (base.EntityState == Microsoft.EntityFrameworkCore.EntityState.Modified)
    						base.RecordStateValue("RowId", new Tuple<object, object>(lrowid, value));
    					lrowid = value;
    				}
    			}
    		}
    		private string lrowid;
    		
    		[DataMember]
    		public string  AppId
    		{
    			 get
    			{
    				return lappid;
    			}
    
    			 set
    			{
    				if (lappid != value)
    				{
    					if (base.EntityState == Microsoft.EntityFrameworkCore.EntityState.Modified)
    						base.RecordStateValue("AppId", new Tuple<object, object>(lappid, value));
    					lappid = value;
    				}
    			}
    		}
    		private string lappid;
    		
    		[DataMember]
    		public string  COLUMNC16
    		{
    			 get
    			{
    				return lcolumnc16;
    			}
    
    			 set
    			{
    				if (lcolumnc16 != value)
    				{
    					if (base.EntityState == Microsoft.EntityFrameworkCore.EntityState.Modified)
    						base.RecordStateValue("COLUMNC16", new Tuple<object, object>(lcolumnc16, value));
    					lcolumnc16 = value;
    				}
    			}
    		}
    		private string lcolumnc16;
    		
    		[DataMember]
    		public string  COLUMNC17
    		{
    			 get
    			{
    				return lcolumnc17;
    			}
    
    			 set
    			{
    				if (lcolumnc17 != value)
    				{
    					if (base.EntityState == Microsoft.EntityFrameworkCore.EntityState.Modified)
    						base.RecordStateValue("COLUMNC17", new Tuple<object, object>(lcolumnc17, value));
    					lcolumnc17 = value;
    				}
    			}
    		}
    		private string lcolumnc17;
    		
    
    //    [DataMember]
    //public virtual Page Page { get; set; }
        [DataMember]
    public virtual Rule Rule { get; set; }
    }
}
