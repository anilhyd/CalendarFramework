//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Serialization;

namespace Calendar.Framework.Security
{
    using System;
    using System.Collections.Generic;
    using Microsoft.EntityFrameworkCore;
    using System.Runtime.Serialization;
    using Calendar.Framework.Entity;

    [DataContract(IsReference = true)]
     [Serializable]
     public partial class UserRoles : EntityBase
    {
    
    	#region Copy
    	/// <summary>
        /// Clones or copy an object.
        /// </summary>
        /// <remarks>
        /// <para>The object to be cloned must be serializable.</para>
        /// <para>The serialization is to use the 
        /// <see cref="System.Xml.Serialization.XmlSerializer" />.
        /// </para>
        /// </remarks>
        /// <returns>AuditUser  object.</returns>
        public UserRoles Copy()
        {
            return (UserRoles)this.MemberwiseClone();
        }
        
        /// <summary>
        /// Creates the new copy of the entity.
        /// </summary>
        public UserRoles CreateObject()
        {
            return new UserRoles();
        }
    
        #endregion
    
    		[DataMember]
    		public string  UserId
    		{
    			 get
    			{
    				return luserid;
    			}
    
    			 set
    			{
    				if (luserid != value)
    				{
    					if (base.EntityState == EntityState.Modified)
    						base.RecordStateValue("UserId", new Tuple<object, object>(luserid, value));
         				if(value != null)
        					luserid = value.Trim();
        				else
        					luserid = string.Empty;
    				}
    			}
    		}
    		private string luserid = string.Empty;
    		
    		[DataMember]
    		public string  RoleId
    		{
    			 get
    			{
    				return lroleid;
    			}
    
    			 set
    			{
    				if (lroleid != value)
    				{
    					if (base.EntityState == EntityState.Modified)
    						base.RecordStateValue("RoleId", new Tuple<object, object>(lroleid, value));
         				if(value != null)
        					lroleid = value.Trim();
        				else
        					lroleid = string.Empty;
    				}
    			}
    		}
    		private string lroleid = string.Empty;
    		
    		[DataMember]
    		public string  AppId
    		{
    			 get
    			{
    				return lappid;
    			}
    
    			 set
    			{
    				if (lappid != value)
    				{
    					if (base.EntityState == EntityState.Modified)
    						base.RecordStateValue("AppId", new Tuple<object, object>(lappid, value));
    					lappid = value;
    				}
    			}
    		}
    		private string lappid;
    		
    		[DataMember]
    		public string  COLUMNC16
    		{
    			 get
    			{
    				return lcolumnc16;
    			}
    
    			 set
    			{
    				if (lcolumnc16 != value)
    				{
    					if (base.EntityState == EntityState.Modified)
    						base.RecordStateValue("COLUMNC16", new Tuple<object, object>(lcolumnc16, value));
    					lcolumnc16 = value;
    				}
    			}
    		}
    		private string lcolumnc16;
    		
    		[DataMember]
    		public string  COLUMNC17
    		{
    			 get
    			{
    				return lcolumnc17;
    			}
    
    			 set
    			{
    				if (lcolumnc17 != value)
    				{
    					if (base.EntityState == EntityState.Modified)
    						base.RecordStateValue("COLUMNC17", new Tuple<object, object>(lcolumnc17, value));
    					lcolumnc17 = value;
    				}
    			}
    		}
    		private string lcolumnc17;
    		
    
        [DataMember]
    public virtual User User { get; set; }
        [DataMember]
    public virtual Role Role { get; set; }
    }
}
