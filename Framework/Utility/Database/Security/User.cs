//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Serialization;

namespace Calendar.Framework.Security
{
    using System;
    using System.Collections.Generic;
    using Microsoft.EntityFrameworkCore;
    using System.Runtime.Serialization;
    using Calendar.Framework.Entity;

    [DataContract(IsReference = true)]
    [Serializable]
    public partial class User : EntityBase
    {
        public User()
        {
            //this.UserPreference = new HashSet<UserPreference>();
            //this.UserVisitedPage = new HashSet<UserVisitedPage>();
            //this.UserFavorite = new HashSet<UserFavorite>();
            this.SKA00021 = new HashSet<User>();
            //this.UserRoles = new HashSet<UserRoles>();
            //this.Team = new HashSet<Team>();
            //this.TeamUsers = new HashSet<TeamUsers>();
            //this.SecurityObjectPrivilege = new HashSet<SecurityObjectPrivilege>();
            //this.ObjectOwner = new HashSet<ObjectOwner>();
            //this.UserOrgConfig = new HashSet<UserOrgConfig>();
            //this.PasswordHistory = new HashSet<PasswordHistory>();
            //this.TileConfig = new HashSet<TileConfig>();
            //this.DAN0136 = new HashSet<OnBehalfOf>();
            //this.DAN01361 = new HashSet<OnBehalfOf>();
        }


        #region Copy
        /// <summary>
        /// Clones or copy an object.
        /// </summary>
        /// <remarks>
        /// <para>The object to be cloned must be serializable.</para>
        /// <para>The serialization is to use the 
        /// <see cref="System.Xml.Serialization.XmlSerializer" />.
        /// </para>
        /// </remarks>
        /// <returns>AuditUser  object.</returns>
        public User Copy()
        {
            return (User)this.MemberwiseClone();
        }

        /// <summary>
        /// Creates the new copy of the entity.
        /// </summary>
        public User CreateObject()
        {
            return new User();
        }

        #endregion

        [DataMember]
        public string Id
        {
            get
            {
                return lid;
            }

            set
            {
                if (lid != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("Id", new Tuple<object, object>(lid, value));
                    if (value != null)
                        lid = value.Trim();
                    else
                        lid = string.Empty;
                }
            }
        }
        private string lid = string.Empty;

        [DataMember]
        public string Code
        {
            get
            {
                return lcode;
            }

            set
            {
                if (lcode != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("Code", new Tuple<object, object>(lcode, value));
                    if (value != null)
                        lcode = value.Trim();
                    else
                        lcode = string.Empty;
                }
            }
        }
        private string lcode = string.Empty;

        [DataMember]
        public string LoginID
        {
            get
            {
                return lloginid;
            }

            set
            {
                if (lloginid != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("LoginID", new Tuple<object, object>(lloginid, value));
                    if (value != null)
                        lloginid = value.Trim();
                    else
                        lloginid = string.Empty;
                }
            }
        }
        private string lloginid = string.Empty;

        [DataMember]
        public string Password
        {
            get
            {
                return lpassword;
            }

            set
            {
                if (lpassword != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("Password", new Tuple<object, object>(lpassword, value));
                    lpassword = value;
                }
            }
        }
        private string lpassword;

        [DataMember]
        public string Question1
        {
            get
            {
                return lquestion1;
            }

            set
            {
                if (lquestion1 != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("Question1", new Tuple<object, object>(lquestion1, value));
                    if (value != null)
                        lquestion1 = value.Trim();
                    else
                        lquestion1 = string.Empty;
                }
            }
        }
        private string lquestion1 = string.Empty;

        [DataMember]
        public string Answer1
        {
            get
            {
                return lanswer1;
            }

            set
            {
                if (lanswer1 != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("Answer1", new Tuple<object, object>(lanswer1, value));
                    if (value != null)
                        lanswer1 = value.Trim();
                    else
                        lanswer1 = string.Empty;
                }
            }
        }
        private string lanswer1 = string.Empty;

        [DataMember]
        public string Question2
        {
            get
            {
                return lquestion2;
            }

            set
            {
                if (lquestion2 != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("Question2", new Tuple<object, object>(lquestion2, value));
                    if (value != null)
                        lquestion2 = value.Trim();
                    else
                        lquestion2 = string.Empty;
                }
            }
        }
        private string lquestion2 = string.Empty;

        [DataMember]
        public string Answer2
        {
            get
            {
                return lanswer2;
            }

            set
            {
                if (lanswer2 != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("Answer2", new Tuple<object, object>(lanswer2, value));
                    if (value != null)
                        lanswer2 = value.Trim();
                    else
                        lanswer2 = string.Empty;
                }
            }
        }
        private string lanswer2 = string.Empty;

        [DataMember]
        public Nullable<System.DateTime> LastPasswordModify
        {
            get
            {
                return llastpasswordmodify;
            }

            set
            {
                if (llastpasswordmodify != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        this.RecordStateValue("LastPasswordModify", new Tuple<object, object>(llastpasswordmodify, value));
                    llastpasswordmodify = value;
                }
            }
        }
        private Nullable<System.DateTime> llastpasswordmodify = default(Nullable<System.DateTime>);

        [DataMember]
        public decimal UserType
        {
            get
            {
                return lusertype;
            }

            set
            {
                if (lusertype != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        this.RecordStateValue("UserType", new Tuple<object, object>(lusertype, value));
                    lusertype = value;
                }
            }
        }
        private decimal lusertype = default(decimal);

        [DataMember]
        public string EmailId
        {
            get
            {
                return lemailid;
            }

            set
            {
                if (lemailid != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("EmailId", new Tuple<object, object>(lemailid, value));
                    if (value != null)
                        lemailid = value.Trim();
                    else
                        lemailid = string.Empty;
                }
            }
        }
        private string lemailid = string.Empty;

        [DataMember]
        public string EmployeeId
        {
            get
            {
                return lemployeeid;
            }

            set
            {
                if (lemployeeid != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("EmployeeId", new Tuple<object, object>(lemployeeid, value));
                    if (value != null)
                        lemployeeid = value.Trim();
                    else
                        lemployeeid = string.Empty;
                }
            }
        }
        private string lemployeeid = string.Empty;

        [DataMember]
        public string FirstName
        {
            get
            {
                return lfirstname;
            }

            set
            {
                if (lfirstname != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("FirstName", new Tuple<object, object>(lfirstname, value));
                    if (value != null)
                        lfirstname = value.Trim();
                    else
                        lfirstname = string.Empty;
                }
            }
        }
        private string lfirstname = string.Empty;

        [DataMember]
        public string LastName
        {
            get
            {
                return llastname;
            }

            set
            {
                if (llastname != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("LastName", new Tuple<object, object>(llastname, value));
                    if (value != null)
                        llastname = value.Trim();
                    else
                        llastname = string.Empty;
                }
            }
        }
        private string llastname = string.Empty;

        [DataMember]
        public string Title
        {
            get
            {
                return ltitle;
            }

            set
            {
                if (ltitle != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("Title", new Tuple<object, object>(ltitle, value));
                    if (value != null)
                        ltitle = value.Trim();
                    else
                        ltitle = string.Empty;
                }
            }
        }
        private string ltitle = string.Empty;

        [DataMember]
        public string Mobile
        {
            get
            {
                return lmobile;
            }

            set
            {
                if (lmobile != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("Mobile", new Tuple<object, object>(lmobile, value));
                    if (value != null)
                        lmobile = value.Trim();
                    else
                        lmobile = string.Empty;
                }
            }
        }
        private string lmobile = string.Empty;

        [DataMember]
        public string Phone
        {
            get
            {
                return lphone;
            }

            set
            {
                if (lphone != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("Phone", new Tuple<object, object>(lphone, value));
                    if (value != null)
                        lphone = value.Trim();
                    else
                        lphone = string.Empty;
                }
            }
        }
        private string lphone = string.Empty;

        [DataMember]
        public string Street1
        {
            get
            {
                return lstreet1;
            }

            set
            {
                if (lstreet1 != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("Street1", new Tuple<object, object>(lstreet1, value));
                    if (value != null)
                        lstreet1 = value.Trim();
                    else
                        lstreet1 = string.Empty;
                }
            }
        }
        private string lstreet1 = string.Empty;

        [DataMember]
        public string Street2
        {
            get
            {
                return lstreet2;
            }

            set
            {
                if (lstreet2 != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("Street2", new Tuple<object, object>(lstreet2, value));
                    if (value != null)
                        lstreet2 = value.Trim();
                    else
                        lstreet2 = string.Empty;
                }
            }
        }
        private string lstreet2 = string.Empty;

        [DataMember]
        public string Street3
        {
            get
            {
                return lstreet3;
            }

            set
            {
                if (lstreet3 != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("Street3", new Tuple<object, object>(lstreet3, value));
                    if (value != null)
                        lstreet3 = value.Trim();
                    else
                        lstreet3 = string.Empty;
                }
            }
        }
        private string lstreet3 = string.Empty;

        [DataMember]
        public string City
        {
            get
            {
                return lcity;
            }

            set
            {
                if (lcity != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("City", new Tuple<object, object>(lcity, value));
                    if (value != null)
                        lcity = value.Trim();
                    else
                        lcity = string.Empty;
                }
            }
        }
        private string lcity = string.Empty;

        [DataMember]
        public string Province
        {
            get
            {
                return lprovince;
            }

            set
            {
                if (lprovince != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("Province", new Tuple<object, object>(lprovince, value));
                    if (value != null)
                        lprovince = value.Trim();
                    else
                        lprovince = string.Empty;
                }
            }
        }
        private string lprovince = string.Empty;

        [DataMember]
        public string Country
        {
            get
            {
                return lcountry;
            }

            set
            {
                if (lcountry != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("Country", new Tuple<object, object>(lcountry, value));
                    if (value != null)
                        lcountry = value.Trim();
                    else
                        lcountry = string.Empty;
                }
            }
        }
        private string lcountry = string.Empty;

        [DataMember]
        public string PostalCode
        {
            get
            {
                return lpostalcode;
            }

            set
            {
                if (lpostalcode != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("PostalCode", new Tuple<object, object>(lpostalcode, value));
                    if (value != null)
                        lpostalcode = value.Trim();
                    else
                        lpostalcode = string.Empty;
                }
            }
        }
        private string lpostalcode = string.Empty;

        [DataMember]
        public string ReportToId
        {
            get
            {
                return lreporttoid;
            }

            set
            {
                if (lreporttoid != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("ReportToId", new Tuple<object, object>(lreporttoid, value));
                    lreporttoid = value;
                }
            }
        }
        private string lreporttoid;

        [DataMember]
        public byte NoOfLoginAttempts
        {
            get
            {
                return lnoofloginattempts;
            }

            set
            {
                if (lnoofloginattempts != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        this.RecordStateValue("NoOfLoginAttempts", new Tuple<object, object>(lnoofloginattempts, value));
                    lnoofloginattempts = value;
                }
            }
        }
        private byte lnoofloginattempts = default(byte);

        [DataMember]
        public string AuthenticationSource
        {
            get
            {
                return lauthenticationsource;
            }

            set
            {
                if (lauthenticationsource != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("AuthenticationSource", new Tuple<object, object>(lauthenticationsource, value));
                    if (value != null)
                        lauthenticationsource = value.Trim();
                    else
                        lauthenticationsource = string.Empty;
                }
            }
        }
        private string lauthenticationsource = string.Empty;

        [DataMember]
        public string SocialNetworkId
        {
            get
            {
                return lsocialnetworkid;
            }

            set
            {
                if (lsocialnetworkid != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("SocialNetworkId", new Tuple<object, object>(lsocialnetworkid, value));
                    lsocialnetworkid = value;
                }
            }
        }
        private string lsocialnetworkid;

        [DataMember]
        public byte AuthenticationType
        {
            get
            {
                return lauthenticationtype;
            }

            set
            {
                if (lauthenticationtype != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        this.RecordStateValue("AuthenticationType", new Tuple<object, object>(lauthenticationtype, value));
                    lauthenticationtype = value;
                }
            }
        }
        private byte lauthenticationtype = default(byte);

        [DataMember]
        public Nullable<byte> UserState
        {
            get
            {
                return luserstate;
            }

            set
            {
                if (luserstate != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        this.RecordStateValue("UserState", new Tuple<object, object>(luserstate, value));
                    luserstate = value;
                }
            }
        }
        private Nullable<byte> luserstate = default(Nullable<byte>);

        [DataMember]
        public Nullable<decimal> LoginType
        {
            get
            {
                return llogintype;
            }

            set
            {
                if (llogintype != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        this.RecordStateValue("LoginType", new Tuple<object, object>(llogintype, value));
                    llogintype = value;
                }
            }
        }
        private Nullable<decimal> llogintype = default(Nullable<decimal>);

        [DataMember]
        public string TokenId
        {
            get
            {
                return ltokenid;
            }

            set
            {
                if (ltokenid != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("TokenId", new Tuple<object, object>(ltokenid, value));
                    ltokenid = value;
                }
            }
        }
        private string ltokenid;

        [DataMember]
        public System.DateTime TokenIssuedDateTime
        {
            get
            {
                return ltokenissueddatetime;
            }

            set
            {
                if (ltokenissueddatetime != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        this.RecordStateValue("TokenIssuedDateTime", new Tuple<object, object>(ltokenissueddatetime, value));
                    ltokenissueddatetime = value;
                }
            }
        }
        private System.DateTime ltokenissueddatetime = default(System.DateTime);

        [DataMember]
        public string EncryptPassword
        {
            get
            {
                return lencryptpassword;
            }

            set
            {
                if (lencryptpassword != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("EncryptPassword", new Tuple<object, object>(lencryptpassword, value));
                    lencryptpassword = value;
                }
            }
        }
        private string lencryptpassword;

        [DataMember]
        public string AppId
        {
            get
            {
                return lappid;
            }

            set
            {
                if (lappid != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("AppId", new Tuple<object, object>(lappid, value));
                    lappid = value;
                }
            }
        }
        private string lappid;

        [DataMember]
        public string COLUMNC16
        {
            get
            {
                return lcolumnc16;
            }

            set
            {
                if (lcolumnc16 != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("COLUMNC16", new Tuple<object, object>(lcolumnc16, value));
                    lcolumnc16 = value;
                }
            }
        }
        private string lcolumnc16;

        [DataMember]
        public string COLUMNC17
        {
            get
            {
                return lcolumnc17;
            }

            set
            {
                if (lcolumnc17 != value)
                {
                    if (base.EntityState == EntityState.Modified)
                        base.RecordStateValue("COLUMNC17", new Tuple<object, object>(lcolumnc17, value));
                    lcolumnc17 = value;
                }
            }
        }
        private string lcolumnc17;


        //    [DataMember]
        //public virtual ICollection<UserPreference> UserPreference { get; set; }
        //    [DataMember]
        //public virtual ICollection<UserVisitedPage> UserVisitedPage { get; set; }
        //    [DataMember]
        //public virtual ICollection<UserFavorite> UserFavorite { get; set; }
        //    [DataMember]
        //public virtual Organization Organization { get; set; }
        [DataMember]
        public virtual ICollection<User> SKA00021 { get; set; }
        [DataMember]
        public virtual User ReportToIdUser { get; set; }
        //[DataMember]
        //public virtual ICollection<UserRoles> UserRoles { get; set; }
        //    [DataMember]
        //public virtual ICollection<Team> Team { get; set; }
        //    [DataMember]
        //public virtual ICollection<TeamUsers> TeamUsers { get; set; }
        //    [DataMember]
        //public virtual ICollection<SecurityObjectPrivilege> SecurityObjectPrivilege { get; set; }
        //    [DataMember]
        //public virtual ICollection<ObjectOwner> ObjectOwner { get; set; }
        //    [DataMember]
        //public virtual BusinessUnit BusinessUnit { get; set; }
        //    [DataMember]
        //public virtual ICollection<UserOrgConfig> UserOrgConfig { get; set; }
        //    [DataMember]
        //public virtual ICollection<PasswordHistory> PasswordHistory { get; set; }
        //    [DataMember]
        //public virtual ICollection<TileConfig> TileConfig { get; set; }
        //    [DataMember]
        //public virtual ICollection<OnBehalfOf> DAN0136 { get; set; }
        //    [DataMember]
        //public virtual ICollection<OnBehalfOf> DAN01361 { get; set; }
    }
}
