//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Serialization;

namespace Calendar.Framework.Security
{
    using System;
    using System.Collections.Generic;
    using Microsoft.EntityFrameworkCore;

    using System.Runtime.Serialization;
    using Calendar.Framework.Entity;

    [DataContract(IsReference = true)]
     [Serializable]
     public partial class Role : EntityBase
    {
        public Role()
        {
            this.UserRoles = new HashSet<UserRoles>();
            //this.TeamRoles = new HashSet<TeamRoles>();
            //this.RolePrivileges = new HashSet<RolePrivileges>();
        }
    
    
    	#region Copy
    	/// <summary>
        /// Clones or copy an object.
        /// </summary>
        /// <remarks>
        /// <para>The object to be cloned must be serializable.</para>
        /// <para>The serialization is to use the 
        /// <see cref="System.Xml.Serialization.XmlSerializer" />.
        /// </para>
        /// </remarks>
        /// <returns>AuditUser  object.</returns>
        public Role Copy()
        {
            return (Role)this.MemberwiseClone();
        }
        
        /// <summary>
        /// Creates the new copy of the entity.
        /// </summary>
        public Role CreateObject()
        {
            return new Role();
        }
    
        #endregion
    
    		[DataMember]
    		public string  Id
    		{
    			 get
    			{
    				return lid;
    			}
    
    			 set
    			{
    				if (lid != value)
    				{
    					if (base.EntityState == EntityState.Modified)
    						base.RecordStateValue("Id", new Tuple<object, object>(lid, value));
         				if(value != null)
        					lid = value.Trim();
        				else
        					lid = string.Empty;
    				}
    			}
    		}
    		private string lid = string.Empty;
    		
    		[DataMember]
    		public string  Code
    		{
    			 get
    			{
    				return lcode;
    			}
    
    			 set
    			{
    				if (lcode != value)
    				{
    					if (base.EntityState == EntityState.Modified)
    						base.RecordStateValue("Code", new Tuple<object, object>(lcode, value));
         				if(value != null)
        					lcode = value.Trim();
        				else
        					lcode = string.Empty;
    				}
    			}
    		}
    		private string lcode = string.Empty;
    		
    		[DataMember]
    		public string  Name
    		{
    			 get
    			{
    				return lname;
    			}
    
    			 set
    			{
    				if (lname != value)
    				{
    					if (base.EntityState == EntityState.Modified)
    						base.RecordStateValue("Name", new Tuple<object, object>(lname, value));
         				if(value != null)
        					lname = value.Trim();
        				else
        					lname = string.Empty;
    				}
    			}
    		}
    		private string lname = string.Empty;
    		
    		[DataMember]
    		public string  Description
    		{
    			 get
    			{
    				return ldescription;
    			}
    
    			 set
    			{
    				if (ldescription != value)
    				{
    					if (base.EntityState == EntityState.Modified)
    						base.RecordStateValue("Description", new Tuple<object, object>(ldescription, value));
         				if(value != null)
        					ldescription = value.Trim();
        				else
        					ldescription = string.Empty;
    				}
    			}
    		}
    		private string ldescription = string.Empty;
    		
    		[DataMember]
    		public short  RoleType
    		{
    			 get
    			{
    				return lroletype;
    			}
    
    			 set
    			{
    					if (lroletype != value)
    					{
    						if (base.EntityState == EntityState.Modified)
    							this.RecordStateValue("RoleType", new Tuple<object, object>(lroletype, value));
    						lroletype = value;
    					}
    			}
    		}
    		private short lroletype = default(short);
    		
    		[DataMember]
    		public Nullable<short>  RoleLevelId
    		{
    			 get
    			{
    				return lrolelevelid;
    			}
    
    			 set
    			{
    					if (lrolelevelid != value)
    					{
    						if (base.EntityState == EntityState.Modified)
    							this.RecordStateValue("RoleLevelId", new Tuple<object, object>(lrolelevelid, value));
    						lrolelevelid = value;
    					}
    			}
    		}
    		private Nullable<short> lrolelevelid = default(Nullable<short>);
    		
    		[DataMember]
    		public string  AppId
    		{
    			 get
    			{
    				return lappid;
    			}
    
    			 set
    			{
    				if (lappid != value)
    				{
    					if (base.EntityState == EntityState.Modified)
    						base.RecordStateValue("AppId", new Tuple<object, object>(lappid, value));
    					lappid = value;
    				}
    			}
    		}
    		private string lappid;
    		
    		[DataMember]
    		public string  COLUMNC16
    		{
    			 get
    			{
    				return lcolumnc16;
    			}
    
    			 set
    			{
    				if (lcolumnc16 != value)
    				{
    					if (base.EntityState == EntityState.Modified)
    						base.RecordStateValue("COLUMNC16", new Tuple<object, object>(lcolumnc16, value));
    					lcolumnc16 = value;
    				}
    			}
    		}
    		private string lcolumnc16;
    		
    		[DataMember]
    		public string  COLUMNC17
    		{
    			 get
    			{
    				return lcolumnc17;
    			}
    
    			 set
    			{
    				if (lcolumnc17 != value)
    				{
    					if (base.EntityState == EntityState.Modified)
    						base.RecordStateValue("COLUMNC17", new Tuple<object, object>(lcolumnc17, value));
    					lcolumnc17 = value;
    				}
    			}
    		}
    		private string lcolumnc17;
    		
    		[DataMember]
    		public bool  IsExtraAuthentcation
    		{
    			 get
    			{
    				return lisextraauthentcation;
    			}
    
    			 set
    			{
    					if (lisextraauthentcation != value)
    					{
    						if (base.EntityState == EntityState.Modified)
    							this.RecordStateValue("IsExtraAuthentcation", new Tuple<object, object>(lisextraauthentcation, value));
    						lisextraauthentcation = value;
    					}
    			}
    		}
    		private bool lisextraauthentcation = default(bool);
    		
    		[DataMember]
    		public Nullable<short>  LoginType
    		{
    			 get
    			{
    				return llogintype;
    			}
    
    			 set
    			{
    					if (llogintype != value)
    					{
    						if (base.EntityState == EntityState.Modified)
    							this.RecordStateValue("LoginType", new Tuple<object, object>(llogintype, value));
    						llogintype = value;
    					}
    			}
    		}
    		private Nullable<short> llogintype = default(Nullable<short>);
    		
    
        [DataMember]
    public virtual Organization Organization { get; set; }
        [DataMember]
    public virtual ICollection<UserRoles> UserRoles { get; set; }
    //    [DataMember]
    //public virtual ICollection<TeamRoles> TeamRoles { get; set; }
    //    [DataMember]
    //public virtual ICollection<RolePrivileges> RolePrivileges { get; set; }
    }
}
